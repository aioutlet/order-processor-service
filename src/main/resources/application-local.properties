# =============================================================================
# Order Processor Service - Local Development Configuration
# =============================================================================
# This file is loaded when spring.profiles.active=local
# Use for VS Code debugging when infrastructure runs in Docker

# =============================================================================
# Spring Profile Configuration
# =============================================================================
spring.profiles.active=local

# =============================================================================
# Database Configuration
# =============================================================================
# PostgreSQL connection - connects to Docker infrastructure
spring.datasource.url=jdbc:postgresql://localhost:5435/order_processor_service_local_db
spring.datasource.username=orderprocessoruser
spring.datasource.password=order_processor_dev_pass_123

# =============================================================================
# JPA Configuration
# =============================================================================
# Development JPA settings with SQL logging
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# =============================================================================
# Flyway Configuration
# =============================================================================
# Database migration settings for development
spring.flyway.baseline-on-migrate=true

# =============================================================================
# Message Broker Configuration
# =============================================================================
# RabbitMQ connection - connects to Docker infrastructure
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=admin
spring.rabbitmq.password=admin123

# =============================================================================
# Cache Configuration
# =============================================================================
# Redis connection - connects to Docker infrastructure, uses database 6
spring.data.redis.host=localhost
spring.data.redis.port=6379
spring.data.redis.password=redis_dev_pass_123

# =============================================================================
# Actuator Configuration
# =============================================================================
# Development actuator settings with detailed exposure
management.endpoints.web.exposure.include=health,info,metrics,prometheus,loggers,mappings
management.endpoint.health.show-details=always
management.endpoint.health.show-components=always

# =============================================================================
# Logging Configuration
# =============================================================================
# Development logging with detailed SQL and transaction logs
logging.level.com.aioutlet.orderprocessor=DEBUG
logging.level.org.springframework.amqp=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.transaction=DEBUG
logging.level.org.springframework.orm.jpa=DEBUG

# =============================================================================
# Security Configuration
# =============================================================================
# JWT settings for local development
security.jwt.secret=your-super-secret-jwt-key-for-development-only-order-processor-local
security.jwt.expiration=86400000

# =============================================================================
# Saga Pattern Configuration
# =============================================================================
# Saga timeouts in seconds (shorter for development)
saga.timeout.payment=300
saga.timeout.inventory=180
saga.timeout.shipping=240
saga.retry.maxAttempts=3
saga.retry.initialDelay=1000
saga.scheduler.stuck-sagas-rate=900000
saga.scheduler.retry-sagas-rate=300000

# =============================================================================
# Message Routing Configuration
# =============================================================================
# Local environment message broker setup
messaging.exchange.name=orders.exchange.local
messaging.queue.order-processor=order.processor.queue.local

# =============================================================================
# Service Discovery Configuration
# =============================================================================
# External service URLs - connects to other microservices
services.user.url=http://localhost:3002/api/v1
services.auth.url=http://localhost:3001/api/v1
services.order.url=http://localhost:5001/api/v1
services.payment.url=http://localhost:5002/api/v1
services.inventory.url=http://localhost:5000/api/v1
services.product.url=http://localhost:8000/api/v1
services.admin.url=http://localhost:3010/api/v1
services.audit.url=http://localhost:9000/api/v1

# =============================================================================
# Application Configuration
# =============================================================================
# Environment-specific application settings
app.environment=local
app.debug.enabled=true
app.test.data.enabled=true
app.metrics.detailed=true

# =============================================================================
# CORS Configuration
# =============================================================================
# Local development CORS settings
app.cors.allowed-origins=http://localhost:3000,http://localhost:3001,http://localhost:3010,http://localhost:8083
app.cors.allowed-headers=*
app.cors.max-age=3600

# =============================================================================
# Observability Configuration
# =============================================================================
# Tracing and monitoring for local development
app.tracing.enabled=true
app.tracing.sample-rate=1.0
app.correlation-id.header=x-correlation-id
