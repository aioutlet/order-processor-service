# =============================================================================
# Order Processor Service - Development Environment Configuration
# =============================================================================
# This file is loaded when spring.profiles.active=development

# Server Configuration
server.port=8083
server.servlet.context-path=/api

# Spring Configuration
spring.application.name=order-processor-service
spring.profiles.active=development

# Database Configuration (PostgreSQL - connects to Docker infrastructure)
spring.datasource.url=jdbc:postgresql://localhost:5437/order_processor_service_dev_db
spring.datasource.username=orderprocessoruser
spring.datasource.password=order_processor_dev_secure_pass_456
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.jdbc.batch_size=25
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true

# Flyway Configuration
spring.flyway.locations=classpath:db/migration
spring.flyway.baseline-on-migrate=true
spring.flyway.enabled=true

# RabbitMQ Configuration (connects to Docker infrastructure)
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5673
spring.rabbitmq.username=admin
spring.rabbitmq.password=rabbitmq_dev_secure_654
spring.rabbitmq.virtual-host=/
spring.rabbitmq.connection-timeout=30000
spring.rabbitmq.requested-heartbeat=30

# Redis Configuration (connects to Docker infrastructure)
spring.redis.host=localhost
spring.redis.port=6380
spring.redis.password=redis_dev_secure_pass_321
spring.redis.database=6
spring.redis.timeout=2000ms

# Actuator Configuration
management.endpoints.web.exposure.include=health,info,metrics,prometheus
management.endpoint.health.show-details=always
management.health.db.enabled=true
management.health.rabbit.enabled=true
management.health.redis.enabled=true

# Logging Configuration
logging.level.com.aioutlet.orderprocessor=INFO
logging.level.org.springframework.amqp=WARN
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# JWT Configuration
security.jwt.secret=development-jwt-secret-key-for-order-processor-service-very-secure
security.jwt.issuer=aioutlet-auth-service
security.jwt.audience=aioutlet-order-processor-service
security.jwt.expiration=86400000

# Saga Configuration
saga.timeout.payment=300
saga.timeout.inventory=180
saga.timeout.shipping=240
saga.retry.maxAttempts=3
saga.retry.backoffMultiplier=2
saga.retry.initialDelay=1000
saga.scheduler.stuck-sagas-rate=900000
saga.scheduler.retry-sagas-rate=300000

# Message Broker Configuration
messaging.exchange.name=orders.exchange.dev
messaging.exchange.type=topic
messaging.queue.order-processor=order.processor.queue.dev
messaging.routing-key.order-created=order.created
messaging.routing-key.order-updated=order.updated
messaging.routing-key.order-cancelled=order.cancelled
messaging.routing-key.payment-processed=payment.processed
messaging.routing-key.payment-failed=payment.failed
messaging.routing-key.inventory-reserved=inventory.reserved
messaging.routing-key.inventory-failed=inventory.failed
messaging.routing-key.shipping-prepared=shipping.prepared
messaging.routing-key.shipping-failed=shipping.failed

# External Services Configuration (connects to other services)
services.user.url=http://localhost:3002/api/v1
services.auth.url=http://localhost:3001/api/v1
services.order.url=http://localhost:5001/api/v1
services.payment.url=http://localhost:5002/api/v1
services.inventory.url=http://localhost:5000/api/v1
services.product.url=http://localhost:8000/api/v1
services.admin.url=http://localhost:3010/api/v1
services.audit.url=http://localhost:9000/api/v1

# Environment-specific settings
app.environment=development
app.debug.enabled=true
app.test.data.enabled=true
app.metrics.detailed=true

# CORS Configuration
app.cors.allowed-origins=http://localhost:3000,http://localhost:3001,http://localhost:3010,http://localhost:8083
app.cors.allowed-methods=GET,POST,PUT,DELETE,PATCH,OPTIONS
app.cors.allowed-headers=*
app.cors.allow-credentials=true
app.cors.max-age=3600
